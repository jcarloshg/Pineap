type Person @model {
  id: ID!
  last_name: String!
  first_name: String!
  birthday: AWSDateTime
  role: String!
  email: String!
  # conection 1-* with Shop
  shops: [Shop] @connection(keyName: "byPerson", fields: ["id"])
  # conection 1-1 with Reservation
  reservation: [Reservation] @manyToMany(relationName: "PersonReservation")
}

# New model
type Shop @model @key(name: "byPerson", fields: ["PersonID", "name"]) {
  id: ID!
  PersonID: ID!
  Person: Person! @connection(fields: ["PersonID"])
  name: String!
  type: String!
  address: String!
  id_photo: String!
  # New field with @connection
  days: [Day] @connection(keyName: "byDay", fields: ["id"])
  # conection 1-1 with Reservation
  reservation: [Reservation] @manyToMany(relationName: "ShopReservation")
}

enum DaysName {
  DOMINGO
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
}

type Day @model @key(name: "byDay", fields: ["ShopID", "dayName"]) {
  id: ID!
  hour_open: AWSTime
  hour_close: AWSTime
  dayName: String!
  day: DaysName!
  isOpen: Boolean!
  # conection 1-1 with shop
  ShopID: ID!
  Shop: Shop! @connection(fields: ["ShopID"])
}

enum StatusReservation {
  isComplete
  isNext
}

enum MethodPayment {
  card
  cash
}

type Reservation
  @model{
  id: ID!
  hour: AWSTime
  date: AWSDate
  description: String
  methodPayment: MethodPayment!
  status: StatusReservation!
  # conection 1-1 with shop
  shop: [Shop] @manyToMany(relationName: "ShopReservation")
  # conection 1-1 with person
  person: [Person] @manyToMany(relationName: "PersonReservation")
}
